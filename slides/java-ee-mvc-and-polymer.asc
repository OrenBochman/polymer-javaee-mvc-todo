= Modern Web Apps with HTML5 Web Components and Polymer, Java EE MVC and JAX-RS
Kito Mann (@kito99), Virtua, Inc.
:backend: revealjs
:source-highlighter: highlight.js 
:revealjs_history: true
:figure-caption!:

:imagesdir: images
:server-url: 127.0.0.1:8000/
:custom-elements-src-dir: 

:element1-demo: {server-url}/simple-counter-demo-es-2015.html

:element1-demo-src: {custom-elements-src-dir}/src/simple-counter.js
:element1-src: {custom-elements-src-dir}/src/simple-counter.js

:element2-demo: {server-url}/deluxe-counter-demo-es-2015.html
:element2-demo-src: {custom-elements-src-dir}/deluxe-counter-demo.html
:element2-src: {custom-elements-src-dir}/src/deluxe-counter.js		

:putting-it-all-together-demo: {server-url}/labs/putting-it-all-together/deluxe-counter-demo.html

:examples-dir: examples

:shadom-dom-simple-src: {examples-dir}/shadow-dom-simple.html
:shadom-dom-simple-projection-src: {examples-dir}/shadow-dom-simple-projection.html
:shadom-dom-projection-src: {examples-dir}/shadow-dom-projection.html

:vanilla-js-src: {examples-dir}/hello-world-vanilla-js.html

:polymer-src: {examples-dir}/seed-element-polymer.html

:template-simple-src: {examples-dir}/template-simple.html

== Kito D. Mann (@kito99)
* Principal Consultant at Virtua (http://virtua.tech)
* Training, consulting, architecture, mentoring
** JSF, Java EE, Polymer/Web Components, Angular
* Official US PrimeFaces and PrimeNG partner
* Author, JavaServer Faces in Action
* Founder, JSF Central (http://www.jsfcentral.com)

== Kito D. Mann (@kito99)
* Co-host, Enterprise Java Newscast (http://enterprisejavanews.com)
* Internationally recognized speaker
** JavaOne, JavaZone, Devoxx, Devnexus, NFJS, etc.
* JCP Member
** JSF, MVC, JSF Portlet Bridge, Portlets 

== MVC
[%step]
* https://www.jcp.org/en/jsr/detail?id=371[JSR (371)^]
** Originally part of Java EE 8
* Action-based server-side framework like Spring MVC
* Based on community feedback
* Last official release: EDR2
* Designed to exist alongside JSF in Java EE (_not_ a replacement)

== MVC
[%step]
* Oracle dropped MVC from Java EE
* Community has moved forward with the spec independently: https://www.mvc-spec.org/
* Spec and RI are still evolving on github

== MVC and JSF?
.Component-based frameworks (image from Ed Burns: http://www.oracle.com/technetwork/articles/java/mvc-2280472.html[Why Another MVC?^])
image::jsf-component-framework.png[Component Frameworks, 859, 392]

== MVC and JSF?
.Action-based frameworks (image from Ed Burns: http://www.oracle.com/technetwork/articles/java/mvc-2280472.html[Why Another MVC?^])
image::jsf-action-framework.png[Action Frameworks, 859, 392]

== MVC
[%step]
* Built on top of JAX-RS
* Controllers must use CDI
* Controllers can be in request scope
* Allows you to handle errors inside of Controllers instead of globally like JAX-RS

== MVC
[%step]
* Bring your own https://github.com/mvc-spec/ozark/tree/master/ext[template engine^]!   
* Built-in support for CSRF protection
* Support for encoding to avoid XSS attacks

== Demo: MVC and JAX-RS Sample Application
https://github.com/kito99/polymer-javaee-mvc-todo[(source on github)^]

[NOTE.speaker]
--
* Show overall application structure
* TodoApplication class
* LoginController - overall class
* LoginController - login-no-validation and logout
* login.jsp
* LoginController - login-validation, including LoginForm
--

== What about the front-end?

== UI Components are Everywhere
image::page-with-components.png[]

== UI Components are Everywhere
image::page-with-components-annotated.png[]

== UI Components are Everywhere
[%step]
* Component models have been popular since the early ninenties
** Visual Basic
** Delphi
** PowerBuilder

** WinForms
** Windows Presentaiton Framework
** ASP.NET

** Swing
** JavaFX
** JavaServer Faces
** Tapestry

== UI Components are Everywhere
[%step]
* In the browser, component suites must invent their own models:
** YUI
** KendoUI
** Bootstrap
** jQuery UI
** Wijmo
** PrimeUI
** Infragistics

== Why do We Build Components?
[%step]
* Reusable UI functionality
** Within a single application
** Across multiple applications
* You can focus on the core application functionality

== HTML Markup Doesn't Support Non-Native Components
image::page-with-components-source.png[]


////
== We Work with Abstractions
[%step]
* Programming model may be componentized, but native markup is not

== We Work with Abstractions
PrimeFaces (JavaServer Faces) DataTable
[source, language="html", indent=0]
----
<p:dataTable var="car" value="#{dtPaginatorView.cars}" rows="10"
                     paginator="true"
                     paginatorTemplate="{CurrentPageReport}  {FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink} {RowsPerPageDropdown}"
                     rowsPerPageTemplate="5,10,15">
    <p:column headerText="Id">
        <h:outputText value="#{car.id}" />
    </p:column>

    <p:column headerText="Year">
        <h:outputText value="#{car.year}" />
    </p:column>

    <p:column headerText="Brand">
        <h:outputText value="#{car.brand}" />
    </p:column>

    <p:column headerText="Color">
        <h:outputText value="#{car.color}" />
    </p:column>
</p:dataTable>
----

== We Work with Abstractions
Bootstrap Dropdowns
[source, language="html", indent=0]
----
<div class="dropdown">
  <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-expanded="true">
    Dropdown
    <span class="caret"></span>
  </button>
  <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu1">
    <li role="presentation"><a role="menuitem" tabindex="-1" href="#">Action</a></li>
    <li role="presentation"><a role="menuitem" tabindex="-1" href="#">Another action</a></li>
    <li role="presentation"><a role="menuitem" tabindex="-1" href="#">Something else here</a></li>
    <li role="presentation"><a role="menuitem" tabindex="-1" href="#">Separated link</a></li>
  </ul>
</div>
----

== We Work with Abstractions
jQuery UI Tabs
[source, language="html", indent=0]
----
<div id="tabs">
  <ul>
    <li><a href="#tabs-1">Nunc tincidunt</a></li>
    <li><a href="#tabs-2">Proin dolor</a></li>
    <li><a href="#tabs-3">Aenean lacinia</a></li>
  </ul>
  <div id="tabs-1">
    ...
  </div>
  <div id="tabs-2">
 	...
  </div>
  <div id="tabs-3">
	...
</div>
----
////


== What is a Web Component?
[%step]
_Web components bring a native component model to HTML_

== What is a Web Component?

image::polymer-paper-example1.png[]

== What is a Web Component?

[source, language="html"]
----
<paper-action-dialog backdrop autoCloseDisabled layered="false">
  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>

  <paper-button affirmative autofocus>Tap me to close</paper-button>
</paper-action-dialog>
----

== Web Components == Collection of HTML5 Standards
[%step]
* Custom Elements
* HTML Templates
* HTML Imports
* Shadow DOM
** (Custom CSS Properties)

//== Demo
//
//[NOTE.speaker]
//--
//Show counter and source and inspect element in DOM
//--
//http://{element2-demo}[demo^]

== Closing the Browser Gap
[%step]
* Chrome/Android and Opera support everything
* IE doesn't support anything
* All other browsers support HTML Templates
* Shadow DOM and Custom Elements supported in Safari, in development for Firefox
** "Under consideration" for Edge; likely to be added later
* HTML Imports not supported in other browsers
** "Under consideration" for Edge; not planned in Firefox and Safari

== Closing the Browser Gap
[%hardbreaks]

[big]#polyfill#
 [pol-ee-fil]
_noun_
In web development, a polyfill (or polyfiller) is downloadable code which provides facilities that are not built into a web browser. It implements technology that a developer expects the browser to provide natively, providing a more uniform API landscape. For example, many features of HTML5 are not supported by versions of Internet Explorer older than version 8 or 9, but can be used by web pages if those pages install a polyfill. Web shims and HTML5 Shivs are related concepts.

-- Wikipedia

== Closing the Browser Gap
[%step]
* webcomponents.js
** Polyfill for all web component specs

== Closing the Browser Gap

webcomponents.js browser support

image::polyfill-browser-support.png[]

~ Indicates support may be flaky.

== Who uses this Stuff, anyway?
[%step]
* Google
* GE Predix
* McDonald's
* ING
* Comcast
* Gannett (USA Today)
* Netflix
* Red Pill Now

== Demo: webcomponents.org

https://webcomponents.org[^]

== What is Poylmer?

image::webcomponents-stack.svg[]

== Polymer
[%step]
* Library for building web components
* Extensive feature set
** Simplified programming model
** Two-way data binding
** Declarative event handling
** Behaviors (mixins)
** Property observation
** Themeing (CSS Custom Properties)

== Polymer
[%step]
* Polymer Elements Catalog
** Extensive set of ready-to-use components
* Extensive set of tools
** CLI, build, testing, etc.

== Polymer
[%step]
* Developed by and used internally by Google
* Used in over 500 Google projects
** Over 1 billion users
** Over 4,000 custom web components
** Examples: Chrome, Play, Fi, YouTube, and Translate
* Used in over 4 million web pages
* Heavily promoted (https://www.polymer-project.org/summit[Polymer Summit^], https://www.youtube.com/playlist?list=PLOU2XLYxmsII5c3Mgw6fNYCzaWrsM3sMN[Polycasts^], etc.)
// end::session-4[]

//== Polymer
//[source,language="html",indent=0]
//----
//include::{polymer-src}[]
//----


== Demo: Sample Application using Polymer with MVC and JAX-RS
https://github.com/kito99/polymer-javaee-mvc-todo[(source on github)^]

[NOTE.speaker]
--
* login.jsp - web components
** show client-side validation
* todo.html - web components
* TaskController - show JSON responses
* TaskController - show getTaskPage()
** /resources/tasks/listPage
* mvc-tasks.xhtml
--

== Questions?
* Slides and sample app: https://github.com/kito99/polymer-javaee-mvc-todo
* MVC home page: https://www.mvc-spec.org/
* Polymer project: https://www.polymer-project.org
* Webcomponents.org: http://webcomponents.org/
* Virtua (training, consulting, development): http://virtua.tech
